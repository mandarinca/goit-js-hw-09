{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEIC,EAASC,SAASC,cAAc,QA4BpC,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,QAAQC,IAAIL,GACZI,QAAQC,IAAIN,GAEZ,IAAIO,EAAM,CAAEP,WAAUC,SAEtB,OADAI,QAAQC,IAAIC,GACL,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLT,EACFO,EAAQF,GAIRG,EAAOH,E,GAERN,E,IA1CPI,QAAQC,IAAIV,GAEZA,EAAOgB,iBAAiB,UAAU,SAAUC,GAC1CA,EAAEC,iBASgB,IAPlB,IAAIC,EAASC,SAASH,EAAEI,OAAOC,SAASH,OAAOI,OAE3CC,EAAQJ,SAASH,EAAEI,OAAOC,SAASjB,MAAMkB,OAEzCE,EAAOL,SAASH,EAAEI,OAAOC,SAASG,KAAKF,OAGlCG,EAAI,EAAGA,GAAKP,EAAQO,GAAK,EAGhCvB,EAAcuB,EAAGF,GACdG,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACjBwB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAEvE4B,OAAM,SAAAL,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAClBwB,EAAA/B,GAASgC,OAAOI,QAAQ,sBAAuCF,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAEzEmB,GAASC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nlet formEl = document.querySelector('form');\n\nconsole.log(formEl);\n\nformEl.addEventListener('submit', function (e) {\n  e.preventDefault();\n\n  let amount = parseInt(e.target.elements.amount.value); // Отримуємо кількість промісів з поля amount\n  \n  let delay = parseInt(e.target.elements.delay.value); // Отримуємо затримку з поля delay\n  \n  let step = parseInt(e.target.elements.step.value); // Отримуємо крок з поля step\n  \n\n  for (let i = 1; i <= amount; i += 1) {\n    \n\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.warning(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  console.log(delay);\n  console.log(position);\n\n  let obj = { position, delay };\n  console.log(obj);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(obj)\n        //       // 0.3\n        //       resolve(shouldResolve); // Fulfill shouldResolve\n      } else {\n        reject(obj); // Reject\n      }\n    }, delay);\n  })\n}\n//   \n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       // 0.3\n//       resolve(shouldResolve); // Fulfill shouldResolve\n//     } else {\n//       reject(shouldResolve); // Reject\n//     }\n//   }, (delay += step));\n// }\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n//console.log(createPromise(2, 1500));\n//   .then(({ position, delay }) => {\n//     Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.warning(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","console","log","obj","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","amount","parseInt","target","elements","value","delay1","step","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","warning"],"version":3,"file":"03-promises.2fedc2e1.js.map"}